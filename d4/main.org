#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

#+LATEX_HEADER: \usepackage{mathtools}


* Basic Tests
  :PROPERTIES:
  :header-args: :noweb yes :results output replace :results replace drawer :exports both :import category :noweb no-export
  :END:

** Categories
  
   Basic categories are:
   #+BEGIN_SRC D 
    import category;
    lwriteln(Vec, "\\subset", Smooth, "\\subset \\dots \\subset",  Diff(0), "\\subset", Set);
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   \mathbf{Vec}\subset\mathbf{Diff}_{\infty}\subset \dots \subset\mathbf{Diff}_{0}\subset\mathbf{Set}
   \end{align}
   :END:

** Objects

   Initialize few basic sets and vector spaces:
   #+name: objects
   #+BEGIN_SRC D :exports code
     import category;

     static X = new immutable CatObject(Set, "X");
     static Y = new immutable CatObject(Set, "Y");
     static Z = new immutable CatObject(Set, "Z");

     static U = new immutable CatObject(Vec, "U");
     static V = new immutable CatObject(Vec, "V");
     static W = new immutable CatObject(Vec, "W");
   #+END_SRC

   #+RESULTS: objects
   :RESULTS:
   :END:

   #+BEGIN_SRC D
     <<objects>>

     lwriteln!(" \\quad ")(X.lpretty(), Y.lpretty(), Z.lpretty());
     lwriteln!(" \\quad ")(U.lpretty(), V.lpretty(), W.lpretty());
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   X \in \mathbf{Set} \quad Y \in \mathbf{Set} \quad Z \in \mathbf{Set}
   \end{align}
   \begin{align}
   U \in \mathbf{Vec} \quad V \in \mathbf{Vec} \quad W \in \mathbf{Vec}
   \end{align}
   :END:

** HomSets

   #+name: homsets
   #+BEGIN_SRC D :exports code
     <<objects>>

     static hom0U = new immutable HomSet(Set, zeroSet, U);
     static setHomXY = new immutable HomSet(Set, X, Y);
     static setHomUV = new immutable HomSet(Set, U, V);
     static smoothHomUV = new immutable HomSet(Smooth, U, V);
     static vecHomUV = new immutable HomSet(Vec, U, V);
     static setHomXV = new immutable HomSet(Set, X, V);
   #+END_SRC

   #+RESULTS: homsets
   :RESULTS:
   :END:

   #+BEGIN_SRC D
   <<homsets>>

   lwriteln!(" \\quad ")(hom0U.lpretty(), setHomXY.lpretty(), setHomUV.lpretty());
   lwriteln!(" \\quad ")(smoothHomUV.lpretty(), vecHomUV.lpretty(), setHomXV.lpretty());
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   \left( \{\emptyset\} \xrightarrow{}  U \right) \in \mathbf{Vec} \quad \left( X \xrightarrow{}  Y \right) \in \mathbf{Set} \quad \left( U \xrightarrow{}  V \right) \in \mathbf{Vec}
   \end{align}
   \begin{align}
   \left( U \xmapsto[\infty]{} V \right) \in \mathbf{Vec} \quad \left( U \xrightharpoonup[]{} V \right) \in \mathbf{Vec} \quad \left( X \xrightarrow{}  V \right) \in \mathbf{Vec}
   \end{align}
   :END:

** Morphisms

   Initialize few basic morphisms
   #+name: morphisms
   #+BEGIN_SRC D :exports code
   <<objects>>
   static F = new immutable Morphism(Set, X, Y, "F");
   static G = new immutable Morphism(Set, X, Z, "G");
   static H = new immutable Morphism(Set, Y, Z, "H");

   static f = new immutable Morphism(Smooth, U, V, "f");
   static g = new immutable Morphism(Smooth, U, W, "g");
   static h = new immutable Morphism(Smooth, V, W, "h");
   

   static A = new immutable Morphism(Vec, U, V, "A");
   static B = new immutable Morphism(Vec, U, W, "B");
   static C = new immutable Morphism(Vec, V, W, "C");
   #+END_SRC

   #+RESULTS: morphisms
   :RESULTS:
   :END:

   #+BEGIN_SRC D
     <<morphisms>>
     lwriteln!(" \\\\ ")(F.lpretty, A.lpretty, f.lpretty);
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   X \xrightarrow{F}  Y \\ U \xrightharpoonup[]{A} V \\ U \xmapsto[\infty]{f} V
   \end{align}
   :END:

** Elements

   #+name: elements
   #+BEGIN_SRC D :exports code
     <<morphisms>>
     static x = new immutable Element(X, "x");
     static y = new immutable Element(Y, "y");
     static z = new immutable Element(Z, "z");

     static u = new immutable Element(U, "u");
     static v = new immutable Element(V, "v");
     static w = new immutable Element(W, "w");
   #+END_SRC

   #+RESULTS: elements
   :RESULTS:
   :END:

   #+BEGIN_SRC D
      <<elements>>
      
      lwriteln!(" \\qquad ")(x.lpretty(), u.lpretty());
      lwriteln!(" \\qquad ")(F(x).lpretty(), f(u).lpretty());
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   x \in X \qquad u \in U
   \end{align}
   \begin{align}
   F \left( x \right) \in Y \qquad f \left( u \right) \in V
   \end{align}
   :END:

** Composed Morphisms

   #+BEGIN_SRC D
     <<elements>>

     auto HF = Set.compose([H,F]);
     auto hf = Smooth.compose([h,f]);
     auto Cf = Smooth.compose([C,f]);

     lwriteln!(" \\qquad ")(HF.lpretty(), HF.cpretty());
     lwriteln!(" \\qquad ")(hf.lpretty(), hf.cpretty());
     lwriteln!(" \\qquad ")(Cf.lpretty(), Cf.cpretty());

   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   X \xrightarrow{\left( H \circ F \right)}  Z \qquad X \xrightarrow{F}  Y \xrightarrow{H}  Z
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( h \circ f \right)} W \qquad U \xmapsto[\infty]{f} V \xmapsto[\infty]{h} W
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( C \circ f \right)} W \qquad U \xmapsto[\infty]{f} V \xrightharpoonup[]{C} W
   \end{align}
   :END:

** Product Morphisms
   #+BEGIN_SRC D
     <<elements>>

     auto FG = product(F,G);
     auto Pi0 = FG.target().projection(0);
     auto Pi1 = FG.target().projection(1);

     lwriteln!(" \\\\ ")(FG.cpretty, Pi0.cpretty, Pi1.cpretty);

     auto fg = product(f,g);
     auto pi0 = fg.target().projection(0);
     auto pi1 = fg.target().projection(1);

     auto xy = cList(f,y);

     xy.lpretty.lwriteln;

     lwriteln();

     lwriteln!(" \\\\ ")(fg.lpretty, pi0.lpretty, pi1.lpretty);

     compose(pi1,fg).cpretty.lwriteln;
     compose(pi1,fg).collapseProjection.lpretty.lwriteln;

     pi1(fg(u)).lpretty.lwriteln;

     auto p = new immutable Morphism(Pol, U, V, "p");
     p.lpretty.lwriteln;

     eval(p.set()).lpretty.lwriteln;
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   X \xrightarrow{\left( F \times G \right)}  \left( Y \times Z \right) \\ \left( Y \times Z \right) \xrightarrow{\pi_{0}}  Y \\ \left( Y \times Z \right) \xrightarrow{\pi_{1}}  Z
   \end{align}
   \begin{align}
   \left( f , y \right) \in \left( \left( U \xmapsto[\infty]{} V \right) \times Y \right)
   \end{align}
   \begin{align}

   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( f \times g \right)} \left( V \times W \right) \\ \left( V \times W \right) \xrightharpoonup[]{\pi_{0}} V \\ \left( V \times W \right) \xrightharpoonup[]{\pi_{1}} W
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( f \times g \right)} \left( V \times W \right) \xrightharpoonup[]{\pi_{1}} W
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{g} W
   \end{align}
   \begin{align}
   g \left( u \right) \in W
   \end{align}
   \begin{align}
   U \xhookrightarrow[]{p} V
   \end{align}
   \begin{align}
   \left( \left( U \xhookrightarrow[]{} V \right) \times U \right) \xhookrightarrow[]{\text{Eval}} V
   \end{align}
   :END:


** Simplifications

   #+BEGIN_SRC D
     <<elements>>
     import std.format;

     immutable(IMorphism) [] arr;
     for(int i=0;i<10;i++){
	if(i%3 == 0)
	  arr ~= new immutable Morphism(Diff(42), U, U, format!"f%d"(i));
   
	if(i%3 == 1)
	  arr ~= U.identity();
	//arr ~= new immutable Morphism(Smooth, U, U, format!"f%d"(i));

	if(i%3 == 2)
	  arr ~= new immutable Morphism(Vec, U, U, format!"f%d"(i));
     }

     auto foo = Smooth.compose(arr[6..10]  ~ Smooth.compose(Smooth.compose(arr[0 .. 3]) ~ arr[ 3 .. 6]));

     lwriteln(foo.lpretty);
     lwriteln(foo.cpretty);

     lwriteln(foo(u).lpretty());

     auto bar = foo.expandComposition();

     lwriteln(bar.lpretty);
     lwriteln(bar.cpretty);

     auto foobar = bar.removeIdentities();

     lwriteln(foobar.lpretty);
     //lwriteln(foobar.cpretty);

     lwriteln(Smooth.compose([U.identity(), arr[0]]).lpretty());
     lwriteln(Smooth.compose([U.identity(), arr[0]]).removeIdentities().lpretty());
     lwriteln(Smooth.compose([U.identity(), U.identity()]).removeIdentities().lpretty());

   #+END_SRC

   #+RESULTS:
   :RESULTS:
   :END:

** Initial & Terminal Object

   Test of initial and terminal object in $\mathbf{Diff}_\infty$
   #+BEGIN_SRC D
     <<elements>>

     static term = zeroSet.terminalMorphism(W);
     static init = emptySet.initialMorphism(U);
     static comp1 = Set.compose([f,u,term,h,f]);
     static comp2 = Set.compose([h,f,init]);

     lwriteln(term.lpretty());
     lwriteln(comp1.lpretty());
     lwriteln(comp1.cpretty());
     lwriteln(comp1.expandTerminalMorphism.cpretty());
     lwriteln();
     lwriteln(comp2.lpretty());
     lwriteln(comp2.cpretty());
     lwriteln(comp2.expandInitialMorphism.cpretty());
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   :END:


   Test Of initial and terminal object in $\mathbf{Vec}$
   #+BEGIN_SRC D
     <<morphisms>>

     static term = zeroSet.terminalMorphism(W);
     static init = zeroSet.initialMorphism(U);
     static comp = Set.compose([C,A,init,term,C,A]);

     lwriteln(term.lpretty());
     lwriteln(comp.lpretty());
     lwriteln(comp.cpretty());
     lwriteln(comp.expandTerminalMorphism.cpretty());
     lwriteln(comp.expandInitialMorphism.cpretty());
     lwriteln(comp.expandInitialMorphism.expandTerminalMorphism.cpretty());
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   :END:

   #+BEGIN_SRC D
     <<elements>>

     static homVW = Smooth.homSet(V,W);
     static homUV = Smooth.homSet(U,V);
     static homUW = Smooth.homSet(U,W);

     static hom = new immutable Hom([homVW,homUV]);
     static prod = new immutable Prod([homUV, homUW]);
     hom.lpretty.lwriteln;
     prod.lpretty.lwriteln;

     hom(cList(h,f)).cpretty.lwriteln;
     hom(cList(h,f)).lpretty.lwriteln;

     prod(cList(f,g)).cpretty.lwriteln;
     prod(cList(f,g)).lpretty.lwriteln;
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   \left( \left( V \xmapsto[\infty]{} W \right) \times \left( U \xmapsto[\infty]{} V \right) \right) \xmapsto[\infty]{\text{hom}} \left( U \xmapsto[\infty]{} W \right)
   \end{align}
   \begin{align}
   \left( \left( U \xmapsto[\infty]{} V \right) \times \left( U \xmapsto[\infty]{} W \right) \right) \xmapsto[\infty]{\text{Prod}} \left( U \xmapsto[\infty]{} \left( V \times W \right) \right)
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{f} V \xmapsto[\infty]{h} W
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( h \circ f \right)} W
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( f \times g \right)} \left( V \times W \right)
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( f \times g \right)} \left( V \times W \right)
   \end{align}
   :END:


   #+BEGIN_SRC D
     <<elements>>

     auto fg = product(f,g);
     auto uv = cList(u,v);


     f(u).extractElement(f).extractElement(u).cpretty.lwriteln;
     auto foo = cast(immutable IComposedMorphism)f(u).extractElement(f).extractElement(u);
     auto bar = cast(immutable IProductMorphism)foo[1];
     auto hoho = bar[0];
     foo[1].cpretty.lwriteln;
     bar.cpretty.lwriteln;
     //f(u).extractElement(f).extractElement(u)(u).lpretty.lwriteln;
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   U \xmapsto[\infty]{\left( \left( \text{Elem}_{\text{Eval}} \circ 0_{U} \right) \times \left( \text{Prod} \circ \left( \left( \text{Elem}_{\text{id}_{\left( U \xmapsto[\infty]{} V \right)}} \circ 0_{U} \right) \times \left( \text{hom} \circ \left( \text{Elem} \times \left( \text{Elem}_{0_{\left( U \xmapsto[\infty]{} V \right)}} \circ 0_{U} \right) \right) \right) \right) \right) \right)} \left( \left( \left( \left( U \xmapsto[\infty]{} V \right) \times U \right) \xmapsto[\infty]{} V \right) \times \left( \left( U \xmapsto[\infty]{} V \right) \xhookrightarrow[]{} \left( \left( U \xmapsto[\infty]{} V \right) \times U \right) \right) \right) \xmapsto[\infty]{\text{hom}} \left( \left( U \xmapsto[\infty]{} V \right) \xmapsto[\infty]{} V \right)
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( \left( \text{Elem}_{\text{Eval}} \circ 0_{U} \right) \times \left( \text{Prod} \circ \left( \left( \text{Elem}_{\text{id}_{\left( U \xmapsto[\infty]{} V \right)}} \circ 0_{U} \right) \times \left( \text{hom} \circ \left( \text{Elem} \times \left( \text{Elem}_{0_{\left( U \xmapsto[\infty]{} V \right)}} \circ 0_{U} \right) \right) \right) \right) \right) \right)} \left( \left( \left( \left( U \xmapsto[\infty]{} V \right) \times U \right) \xmapsto[\infty]{} V \right) \times \left( \left( U \xmapsto[\infty]{} V \right) \xhookrightarrow[]{} \left( \left( U \xmapsto[\infty]{} V \right) \times U \right) \right) \right)
   \end{align}
   \begin{align}
   U \xmapsto[\infty]{\left( \left( \text{Elem}_{\text{Eval}} \circ 0_{U} \right) \times \left( \text{Prod} \circ \left( \left( \text{Elem}_{\text{id}_{\left( U \xmapsto[\infty]{} V \right)}} \circ 0_{U} \right) \times \left( \text{hom} \circ \left( \text{Elem} \times \left( \text{Elem}_{0_{\left( U \xmapsto[\infty]{} V \right)}} \circ 0_{U} \right) \right) \right) \right) \right) \right)} \left( \left( \left( \left( U \xmapsto[\infty]{} V \right) \times U \right) \xmapsto[\infty]{} V \right) \times \left( \left( U \xmapsto[\infty]{} V \right) \xhookrightarrow[]{} \left( \left( U \xmapsto[\infty]{} V \right) \times U \right) \right) \right)
   \end{align}
   :END:

   
   #+BEGIN_SRC D
   <<elements>>

   auto foo = new immutable Morphism(Vec, U, V, "f");

   foo.lpretty.lwriteln;
   foo.tangentMap.lpretty.lwriteln;
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   U \xrightharpoonup[]{f} V
   \end{align}
   \begin{align}
   \left( U \times U \right) \xrightharpoonup[]{T \left( f \right)} \left( V \times V \right)
   \end{align}
   :END:


   #+BEGIN_SRC D
     import category;

     auto U = new immutable CatObject(Vec, "U");
     auto V = new immutable CatObject(Vec, "V");

     auto u = new immutable Element(U, "u");

     auto zeroMap = zeroSet.terminalMorphism(U);
     auto elemu = elementMap(u);
     auto A = new immutable Morphism(Vec, U, V, "A");
     writeln();

     A.grad.grad.cprint;
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   \begin{align}
   \left( A , \left( 0 \circ 0 \right) \right) \in \left( \left( U \xrightharpoonup[]{} V \right) \times \left( U \xrightharpoonup[]{} V \right) \right)
   \end{align}
   \begin{align}
   \left( \emptyset , \emptyset \right) \in \left( \{\emptyset\} \times \{\emptyset\} \right)
   \end{align}
   \begin{align}
   U \xrightharpoonup[]{0_{U}} \{\emptyset\} \xhookrightarrow[]{\text{Elem}_{\left( \text{Elem}_{\left( 0 \circ 0 \right)} \circ 0_{U} \right)}} \left( U \xhookrightarrow[]{} \left( U \xrightharpoonup[]{} V \right) \right)
   \end{align}
   :END:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:
